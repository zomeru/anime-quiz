{"version":3,"sources":["API.ts","config.ts","utils.ts","components/QuestionCard.style.ts","components/QuestionCard.tsx","assets/images/bg.jpg","App.style.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","bg","App","useState","loading","setLoading","questions","setQuestions","setQuestionNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","showNextButton","length","undefined","e","currentTarget","prevScore","answerObject","prevAnswer","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd428466.chunk.js","sourcesContent":["import { API_URL, ANIME_CATEGORY } from './config';\r\nimport { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `${API_URL}amount=${amount}&difficulty=${difficulty}&category=${ANIME_CATEGORY}`;\r\n  const data = await (await fetch(endpoint)).json();\r\n\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const API_URL = 'https://opentdb.com/api.php?';\r\nexport const ANIME_CATEGORY = 31;\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background-color: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25) p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4 )'};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.style';\r\n\r\ninterface QuestionCardProps {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<QuestionCardProps> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className='number'>\r\n        Question: {questionNumber} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map(answer => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/bg.ec3c44af.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport bg from './assets/images/bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html {\r\n    height: 100%;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${bg});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Impact, Haettenschweiler, 'Arial Narrow Bold',\r\n      sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './API';\nimport QuestionCard from './components/QuestionCard';\nimport { GlobalStyle, Wrapper } from './App.style';\n\ninterface AppProps {}\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC<AppProps> = ({}) => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setQuestionNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //Users answer\n      const answer = e.currentTarget.value;\n\n      //Check answer against correct answer\n      const correct = questions[questionNumber].correct_answer === answer;\n\n      //Add score if answer is correct\n      if (correct) setScore(prevScore => prevScore + 1);\n\n      //Save answer in the array for user answers\n      const answerObject = {\n        question: questions[questionNumber].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNumber].correct_answer,\n      };\n      setUserAnswers(prevAnswer => [...prevAnswer, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //Move on to the next question if not the last question\n    const nextQuestion = questionNumber + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setQuestionNumber(nextQuestion);\n    }\n  };\n\n  const showNextButton =\n    !gameOver &&\n    !loading &&\n    userAnswers.length === questionNumber + 1 &&\n    questionNumber !== TOTAL_QUESTIONS;\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Anime Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <p>Loading Question...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={questionNumber + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[questionNumber].question}\n            answers={questions[questionNumber].answers}\n            userAnswer={userAnswers ? userAnswers[questionNumber] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {showNextButton ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}